import React, { useState, useEffect, useRef, useCallback, memo } from 'react';
// 1. Consolidated Lucide Icon Imports
import * as LucideIcons from 'lucide-react';

// Icon helper component
// This component dynamically renders a Lucide icon based on its name.
// It includes a fallback for 'HelpCircleIcon' which might be an alias.
const Icon = memo(({ name, ...props }) => {
    const LucideIcon = LucideIcons[name];
    if (!LucideIcon) {
        if (name === 'HelpCircleIcon') {
            const ActualIcon = LucideIcons['HelpCircle'];
            if (ActualIcon) return <ActualIcon {...props} />;
        }
        console.warn(`Icon "${name}" not found.`);
        return null;
    }
    return <LucideIcon {...props} />;
});

// Mock Supabase client
// This object simulates Supabase's API for storage and database operations.
const supabase = {
    storage: {
        from: (bucketName) => ({
            upload: async (filePath, file) => {
                await new Promise(resolve => setTimeout(resolve, 1000));
                return { data: { path: `mock_storage_path/${bucketName}/${filePath}` }, error: null };
            },
        }),
    },
    from: (table) => ({
        insert: async (records) => {
            await new Promise(resolve => setTimeout(resolve, 300));
            const newRecords = records.map(record => ({...record, id: `mock_${table}_${Date.now()}_${Math.random().toString(36).substring(7)}` }));
            return { data: newRecords, error: null };
        },
        select: async (fields = '*') => {
            await new Promise(resolve => setTimeout(resolve, 300));
            if (table === 'policy_data' || table === 'uploaded_documents') {
                // Example policy data
                return {
                    data: [
                        { id: 'pol_123', name: 'Homeowners Policy HO-123', type: 'policy', policy_number: 'HO-123', carrier: 'State Farm', property_name: 'Sunnyvale Home', premium: 1200, renewal_date: '2025-08-15', status: 'Active', coverage_types: ['Homeowners/Casualty', 'Flood'], processed_text: 'Full text for HO-123. Dwelling, personal property, liability. Deductible $1000. Flood excluded unless endorsed.', document_url: 'mock_path/ho123.pdf', category_key: 'real_estate' },
                        { id: 'doc_abc', name: 'Auto Policy - MyCar.pdf', type: 'policy', policy_number: 'AUT-XYZ-789', carrier: 'Geico', property_name: 'Reliable Sedan', premium: 800, renewal_date: '2025-06-01', status: 'Active', coverage_types: ['Auto Liability', 'Collision/Comprehensive'], processed_text: 'MyCar.pdf details comp/collision for 2021 Toyota Camry. Policy AUT-XYZ-789.', document_url: 'mock_path/mycar.pdf', category_key: 'vehicle' },
                        { id: 'pol_456', name: 'Umbrella Policy UB-456', type: 'policy', policy_number: 'UB-456', carrier: 'Chubb', property_name: 'General Coverage', premium: 500, renewal_date: '2026-01-20', status: 'Active', coverage_types: ['Umbrella'], processed_text: 'Umbrella UB-456: $1M additional liability over home/auto.', document_url: 'mock_path/ub456.pdf', category_key: 'valuables' },
                        { id: 'pol_789', name: 'Boat Policy BT-001', type: 'policy', policy_number: 'BT-001', carrier: 'Progressive', property_name: 'Speedy Boat', premium: 650, renewal_date: '2025-03-10', status: 'Lapsed', coverage_types: ['Hull', 'Liability'], processed_text: 'Speedy Boat policy: hull damage & $300k liability.', document_url: 'mock_path/bt001.pdf', category_key: 'watercraft' },
                    ], error: null };
            }
            if (table === 'properties') {
                 // Example property data
                return { data: [
                    { id: 'prop1', name: 'Sunnyvale Home', address: '123 Main St, Sunnyvale, CA', category_key: 'real_estate', type: 'Real Estate - Primary Residence', created_at: '2024-01-15T10:00:00Z', value: 750000, image_url: 'https://placehold.co/600x400/1f2937/4a5568?text=Property+1', bedrooms: 3, bathrooms: 2, sqft: 1800, lot_size: 0.2, year_built: 1995, county: 'Santa Clara', description: 'Family home, quiet neighborhood.', latitude: 37.3688, longitude: -122.0363 },
                    { id: 'prop2', name: 'Downtown Condo', address: '456 Market Ave, Metropolis, NY', category_key: 'real_estate', type: 'Real Estate - Investment Property', created_at: '2023-11-20T14:30:00Z', value: 520000, image_url: 'https://placehold.co/600x400/1f2937/4a5568?text=Property+2', bedrooms: 2, bathrooms: 1, sqft: 950, year_built: 2010, county: 'Metropolis County', description: 'Modern condo, city views.', latitude: 40.7128, longitude: -74.0060 },
                    { id: 'prop3', name: 'Reliable Sedan', address: 'N/A (Vehicle)', category_key: 'vehicle', type: 'Vehicle - Sedan', created_at: '2024-03-01T09:15:00Z', value: 22000, image_url: 'https://placehold.co/600x400/1f2937/4a5568?text=Vehicle+1', make: 'Toyota', model: 'Camry', year: 2021, vin: 'ABC123XYZ789', county: null, description: 'Daily driver, low mileage.' },
                    { id: 'prop4', name: 'Speedy Boat', address: 'N/A (Watercraft)', category_key: 'watercraft', type: 'Watercraft - Boat', created_at: '2023-05-10T11:00:00Z', value: 45000, image_url: 'https://placehold.co/600x400/1f2937/4a5568?text=Speedy+Boat', make: 'Sea Ray', model: 'SPX 190', year: 2020, hull_id: 'SR123BOAT456HIN', county: null, description: 'Fast boat for weekends.' },
                ], error: null };
            }
            if (table === 'property_insurance_policies') return { data: [], error: null };
            return { data: [], error: null };
        }
    }),
};

// Mock NLP processing function
const mockNlpProcess = async (query, policyText) => {
    await new Promise(resolve => setTimeout(resolve, 800));
    const lastWord = query.toLowerCase().split(" ").filter(Boolean).pop();
    if (policyText && lastWord && policyText.toLowerCase().includes(lastWord)) {
        return `Regarding "${query}": [AI would provide a detailed, context-aware answer based on the policy text here.]`;
    }
    if (!policyText) return "Please select a policy/document first to ask questions about it.";
    return `I couldn't find info about "${query}" in the selected context. Try rephrasing?`;
};

// Shared Tailwind CSS classes
const focusRingClasses = "focus-visible:ring-2 focus-visible:ring-[#00e5ff]";
const primaryButtonClasses = `inline-flex items-center justify-center gap-2 rounded-md text-white bg-gradient-to-r from-[#0057e7] to-[#00e5ff] transition transform-gpu hover:scale-[1.02] active:scale-95 ${focusRingClasses}`;
const secondaryButtonClasses = `inline-flex items-center gap-2 rounded-md bg-gray-700 text-gray-100 hover:bg-gray-600 transition-colors ${focusRingClasses}`;
const glassCardBaseClasses = "backdrop-blur-xs shadow-[0_4px_30px_rgba(0,0,0,0.1)] rounded-lg bg-[#1f2937] bg-opacity-40 border border-white/5";
const glassPanelClasses = `${glassCardBaseClasses}`;
const inputBaseClasses = `w-full p-2.5 bg-gray-700 border border-gray-600 rounded-md outline-none text-gray-200 placeholder-gray-400 ${focusRingClasses} focus:border-transparent disabled:opacity-50`;
const labelBaseClasses = "block text-sm font-medium text-gray-300 mb-1.5";

// Navbar component
const Navbar = memo(({ navigateToDashboard }) => {
    const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
    const navLinks = [ { name: 'Features', href: '#' }, { name: 'About', href: '#' }, ];
    
    const handleSignIn = useCallback(() => {
        navigateToDashboard();
        setIsMobileMenuOpen(false);
    }, [navigateToDashboard]);

    const toggleMobileMenu = useCallback(() => {
        setIsMobileMenuOpen(prev => !prev);
    }, []);

    return (
        <nav className="bg-[#1f2937]/40 backdrop-blur-xs shadow-[0_4px_30px_rgba(0,0,0,0.1)] border border-white/5 text-white p-4 fixed w-full top-0 z-50">
            <div className="container mx-auto flex justify-between items-center">
                <div className="flex items-center space-x-2 cursor-pointer" onClick={() => window.location.reload()} >
                    <Icon name="ShieldCheck" className="h-8 w-8 text-[#0057e7]" />
                    <span className="text-2xl font-bold">ClaimGuardian</span>
                </div>
                <div className="hidden md:flex space-x-6 items-center">
                    {navLinks.map((link) => ( <a key={link.name} href={link.href} className={`text-gray-300 hover:text-[#00e5ff] transition-colors ${focusRingClasses}`}> {link.name} </a> ))}
                    <button onClick={handleSignIn} className={`${primaryButtonClasses} px-4 py-2`} > Sign In </button>
                </div>
                <div className="md:hidden">
                    <button onClick={toggleMobileMenu} aria-label="Toggle menu" className={focusRingClasses}>
                        <Icon name={isMobileMenuOpen ? "X" : "Menu"} size={28} />
                    </button>
                </div>
            </div>
            {isMobileMenuOpen && (
                <div className="md:hidden mt-4 space-y-4 p-4 bg-[#1f2937]/60 backdrop-blur-sm rounded-lg border border-white/10">
                    {navLinks.map((link) => ( <a key={link.name} href={link.href} className={`block py-2 text-gray-300 hover:text-[#00e5ff] transition-colors ${focusRingClasses}`}> {link.name} </a> ))}
                    <button onClick={handleSignIn} className={`${primaryButtonClasses} w-full px-4 py-2.5 text-center`} > Sign In </button>
                </div>
            )}
        </nav>
    );
});

// Main App component
const App = () => {
    const [currentPage, setCurrentPage] = useState('home');
    const [activeTab, setActiveTab] = useState('dashboardHome');

    const navigate = useCallback((page) => {
        setCurrentPage(page);
        if (page === 'dashboard') setActiveTab('dashboardHome');
    }, []);
    
    const switchTab = useCallback((tab) => {
        setActiveTab(tab);
    }, []);

    useEffect(() => {
        document.documentElement.classList.add('dark');
        return () => document.documentElement.classList.remove('dark');
    }, []);

    const navigateToDashboard = useCallback(() => navigate('dashboard'), [navigate]);
    const navigateHome = useCallback(() => navigate('home'), [navigate]);

    return (
        <div className="min-h-screen bg-gray-900 text-gray-100 font-sans leading-relaxed selection:bg-[#0057e7]/80 selection:text-white">
            {currentPage === 'home' && <Navbar navigateToDashboard={navigateToDashboard} />}
            <div className={currentPage === 'home' ? 'pt-16' : ''}>
                {currentPage === 'home' && <HomePage navigateToDashboard={navigateToDashboard} />}
                {currentPage === 'dashboard' && <DashboardPage activeTab={activeTab} switchTab={switchTab} navigateHome={navigateHome} />}
            </div>
        </div>
    );
};

// FeatureCard component
const FeatureCard = memo(({ iconName, title, description, color = "[#00e5ff]", cardClasses, textAlignment = "text-center", iconContainerClasses, titleClasses = "text-xl", descriptionClasses = "text-sm" }) => (
    <div className={`${cardClasses} ${textAlignment}`}>
        {iconContainerClasses && <div className={iconContainerClasses}><Icon name={iconName} size={32} className={`text-${color}`} /></div>}
        {!iconContainerClasses && <Icon name={iconName} size={32} className={`text-${color} mb-3 mx-auto`} />}
        <h3 className={`${titleClasses} font-semibold mb-2 text-gray-100`}>{title}</h3>
        <p className={`${descriptionClasses} leading-relaxed text-gray-300`}>{description}</p>
    </div>
));

// HomePage component
const HomePage = memo(({ navigateToDashboard }) => {
    const glassCardClasses = `${glassCardBaseClasses} hover:border-white/10 transition-all duration-300`;

    const howItWorksSteps = [
        { iconName: "FileSearch", title: "Policy Insight", description: "Upload policies, get insights on risks, gaps, and savings." },
        { iconName: "Edit3", title: "Document Your Loss", description: "Easily upload photos, values, costs, and describe your damage or loss." },
        { iconName: "Cpu", title: "AI-Enhanced Claims Processing", description: "AI generated accurate, insurance-ready claim support documents automatically." },
        { iconName: "Briefcase", title: "Track, Settle, and Recover", description: "Track claims, payouts, and connect with resources/licensed contractors." },
    ];
    const whyStandsOutFeatures = [
        { iconName: "ClipboardList", title: "Actionable Policy Insights", description: "Instantly see exactly what's covered—and what's not—in clear, simple language.", color: "[#0057e7]" },
        { iconName: "AlertTriangle", title: "Proactive Claims Alerts", description: "Receive timely reminders for critical deadlines, documentation requests, and required actions.", color: "[#0057e7]" },
        { iconName: "Settings2", title: "Intelligent Claims Processing", description: "AI accelerates claim validation, reduces friction, detects potential fraud, and ensures rapid payouts.", color: "[#0057e7]" },
        { iconName: "Award", title: "Guaranteed Maximum Coverage", description: "Automatically matches losses to your policy, ensuring every eligible dollar is identified.", color: "[#0057e7]" },
        { iconName: "Paperclip", title: "One-Click Claim Documentation", description: "Simplify claim prep—upload docs/photos, ClaimGuardian compiles organized, insurer-ready docs.", color: "[#0057e7]" },
        { iconName: "Activity", title: "Real-Time Claim Progress", description: "Follow your claim's status, payments, and timelines effortlessly, from any device.", color: "[#0057e7]" },
    ];
    const visionFeatures = [
        { iconName: "Rocket", title: "Disrupting the Status Quo", description: "Managing insurance and claims shouldn't be a fight. ClaimGuardian levels the playing field.", color: "[#0057e7]" },
        { iconName: "Target", title: "Empowering Policyholders", description: "Our AI-driven insights and streamlined processes put you in control, ensuring clarity and maximizing recovery.", color: "[#0057e7]" },
        { iconName: "Sparkles", title: "The Future of Claims", description: "Experience a faster, fairer, and more transparent claims process designed for the modern world.", color: "[#0057e7]" },
    ];

    return (
        <div className="flex flex-col items-center justify-center min-h-[calc(100vh-4rem)] pt-12 pb-16 px-4 md:px-8 text-center overflow-x-hidden">
            <section className="relative z-10 max-w-4xl mb-20 md:mb-32 pt-10 md:pt-16">
                <h1 className="text-5xl md:text-7xl font-bold mb-6 text-[#0057e7] tracking-tight"> ClaimGuardian </h1>
                <p className="text-xl md:text-2xl text-gray-300 mb-10 leading-relaxed max-w-2xl mx-auto"> Insurance companies push back. ClaimGuardian pushes harder—so you don't have to. </p>
                <div className="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-6">
                    <button onClick={navigateToDashboard} className={`${primaryButtonClasses} w-full sm:w-auto px-8 py-3.5 text-lg font-semibold`} > Get Started </button>
                    <button onClick={navigateToDashboard} className={`w-full sm:w-auto px-8 py-3.5 rounded-lg bg-gray-700 text-gray-100 hover:bg-gray-600 transition-colors text-lg font-semibold border border-gray-600 ${focusRingClasses}`} > Sign In </button>
                </div>
            </section>

            <section className="w-full max-w-6xl mb-20 md:mb-32 px-4">
                <h2 className="text-3xl md:text-4xl font-bold text-gray-100 mb-3 text-center">How ClaimGuardian Works</h2>
                <p className="text-lg text-gray-400 mb-12 md:mb-16 text-center">Clear coverage, confident claims, complete recovery.</p>
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 md:gap-8">
                    {howItWorksSteps.map((step, index) => (
                        <div key={index} className={`${glassCardClasses} p-6 md:p-8 text-center`}>
                             <div className="mb-4 inline-flex items-center justify-center w-16 h-16 rounded-full bg-[#0057e7] text-white"> <span className="text-2xl font-bold">{index + 1}</span> </div>
                             <Icon name={step.iconName} size={32} className="text-[#00e5ff] mx-auto mb-3"/>
                             <h3 className="text-xl font-semibold mb-2 text-gray-100">{step.title}</h3>
                             <p className="text-sm leading-relaxed text-gray-300">{step.description}</p>
                        </div>
                    ))}
                </div>
            </section>

            <section className="w-full max-w-6xl mb-20 md:mb-32 px-4">
                <h2 className="text-3xl md:text-4xl font-bold text-gray-100 mb-12 md:mb-16 text-center">Why ClaimGuardian Stands Out</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8">
                    {whyStandsOutFeatures.map((feature, index) => (
                        <FeatureCard key={index} {...feature} cardClasses={`${glassCardClasses} p-6 md:p-8 text-left`} iconContainerClasses="p-2 bg-[#1f2937] rounded-md mr-3 shadow-inner flex items-center" titleClasses="text-lg" />
                    ))}
                </div>
            </section>

             <section className="w-full max-w-3xl mb-20 md:mb-32 px-4 text-center">
                 <h2 className="text-3xl md:text-4xl font-bold text-gray-100 mb-6">Why ClaimGuardian?</h2>
                 <p className="text-lg text-gray-300 leading-relaxed"> Because insurance is complicated, claims are overwhelming, and recovery is stressful. ClaimGuardian simplifies coverage, expertly manages claims, and connects you to resources—ensuring you're protected, supported, and made whole. </p>
             </section>

            <section className="w-full max-w-5xl mb-20 md:mb-32 px-4">
                <h2 className="text-3xl md:text-4xl font-bold text-gray-100 mb-4 text-center">Get Ready for the Change</h2>
                <p className="text-gray-400 mb-12 md:mb-16 text-center max-w-2xl mx-auto leading-relaxed"> ClaimGuardian is poised to transform the insurance experience. Here's a glimpse of the future we're building. </p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 md:gap-8">
                    {visionFeatures.map((feature, index) => (
                         <FeatureCard key={index} {...feature} cardClasses={`${glassCardClasses} p-6 md:p-8 flex flex-col`} iconContainerClasses="flex justify-center mb-4" titleClasses="text-lg" />
                    ))}
                </div>
            </section>

            <section className="w-full max-w-4xl mb-20 md:mb-32 px-4 text-center py-12 md:py-16 bg-[#1f2937]/30 rounded-xl border border-white/5 shadow-xl">
                <h2 className="text-3xl md:text-4xl font-bold text-gray-100 mb-4">Ready for Complete Insurance Confidence?</h2>
                <p className="text-lg text-gray-300 mb-8 max-w-2xl mx-auto leading-relaxed"> Discover why people trust ClaimGuardian to simplify policies, streamline claims, and secure full recovery. </p>
                <button onClick={navigateToDashboard} className={`${primaryButtonClasses} px-10 py-4 text-lg font-semibold`} > Get Started Now </button>
            </section>

            <footer className="w-full border-t border-gray-700 pt-12 pb-8">
                <div className="container mx-auto px-6 md:px-8">
                    <div className="grid grid-cols-1 md:grid-cols-4 gap-8 mb-8">
                        <div className="md:col-span-2">
                            <div className="flex items-center space-x-2 mb-3"> <Icon name="ShieldCheck" className="h-7 w-7 text-[#0057e7]" /> <span className="text-xl font-bold text-gray-100">ClaimGuardian</span> </div>
                            <p className="text-sm text-gray-400 leading-relaxed pr-8"> The AI-driven platform simplifying insurance, streamlining claims, and accelerating recovery. </p>
                        </div>
                        <div> <h5 className="text-md font-semibold text-gray-200 mb-3">Product</h5> <ul className="space-y-2"> <li><a href="#" className={`text-sm text-gray-400 hover:text-[#00e5ff] ${focusRingClasses}`}>Features</a></li> <li><a href="#" className={`text-sm text-gray-400 hover:text-[#00e5ff] ${focusRingClasses}`}>Integrations</a></li> </ul> </div>
                        <div> <h5 className="text-md font-semibold text-gray-200 mb-3">Company</h5> <ul className="space-y-2"> <li><a href="#" className={`text-sm text-gray-400 hover:text-[#00e5ff] ${focusRingClasses}`}>About</a></li> <li><a href="#" className={`text-sm text-gray-400 hover:text-[#00e5ff] ${focusRingClasses}`}>Privacy</a></li> <li><a href="#" className={`text-sm text-gray-400 hover:text-[#00e5ff] ${focusRingClasses}`}>Terms</a></li> </ul> </div>
                    </div>
                    <div className="border-t border-gray-700 pt-8 flex flex-col sm:flex-row justify-between items-center">
                        <p className="text-xs text-gray-500">&copy; {new Date().getFullYear()} ClaimGuardian. All rights reserved.</p>
                        <div className="flex space-x-4 mt-4 sm:mt-0"> <a href="#" aria-label="X (formerly Twitter)" className={`text-gray-500 hover:text-[#00e5ff] ${focusRingClasses}`}><Icon name="Twitter" size={18}/></a> </div>
                    </div>
                </div>
            </footer>
        </div>
    );
});

// DashboardPage component
const DashboardPage = memo(({ activeTab, switchTab, navigateHome }) => {
    const [sidebarOpen, setSidebarOpen] = useState(false);
    // Removed 'uploadPolicy' from headerTextMap
    const headerTextMap = {
        dashboardHome: 'Welcome to Your Dashboard',
        policies: 'Insurance Policies',
        properties: 'Property Management',
        reviewPolicy: 'Review Policy with AI Chatbot',
    };

    // Removed 'uploadPolicy' item from mainNavItems
    const mainNavItems = [
        { id: 'dashboardHome', label: 'Dashboard Home', iconName: 'LayoutDashboard' },
        { id: 'policies', label: 'Policies', iconName: 'FileText' },
        { id: 'properties', label: 'Properties', iconName: 'Building' },
        { id: 'reviewPolicy', label: 'Review Policy (Chat)', iconName: 'MessageSquare' },
    ];
    const futureNavItems = [
        { id: 'claimTracking', label: 'Claim Tracking', iconName: 'Search', isDisabled: true },
        { id: 'recovery', label: 'Recovery', iconName: 'HeartHandshake', isDisabled: true },
        { id: 'resources', label: 'Resources', iconName: 'Library', isDisabled: true },
        { id: 'analytics', label: 'Analytics', iconName: 'PieChart', isDisabled: true },
        { id: 'assetInventory', label: 'Asset & Inventory', iconName: 'Package', isDisabled: true },
        { id: 'social', label: 'Social', iconName: 'UsersRound', isDisabled: true },
    ];
    const utilityNavItems = [
        { id: 'settings', label: 'Settings', iconName: 'Settings', isDisabled: true },
        { id: 'help', label: 'Help & Support', iconName: 'HelpCircle', isDisabled: true },
        { id: 'logout', label: 'Logout', iconName: 'LogOut', action: navigateHome }, 
    ];

    const handleTabSwitch = useCallback((tabId) => {
        switchTab(tabId);
        setSidebarOpen(false);
    }, [switchTab]);

    const handleUtilityAction = useCallback((action) => {
        if (action) {
            action();
            setSidebarOpen(false);
        }
    }, []);
    
    const toggleSidebar = useCallback(() => setSidebarOpen(prev => !prev), []);
    const closeSidebar = useCallback(() => setSidebarOpen(false), []);


    return (
        <div className="flex h-screen">
            <aside className={`fixed inset-y-0 left-0 z-20 flex flex-col bg-[#1f2937] shadow-lg transition-transform duration-300 ease-in-out transform ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} md:relative md:translate-x-0 md:w-64 border-r border-gray-700`}>
                <div className="flex items-center justify-between p-4 h-16 border-b border-gray-700 md:hidden">
                    <div className="flex items-center cursor-pointer" onClick={navigateHome} title="Go to Home Page">
                        <Icon name="ShieldCheck" className="h-7 w-7 text-[#0057e7]" />
                        <h1 className="text-xl font-semibold text-gray-100 ml-2">ClaimGuardian</h1>
                    </div>
                    <button onClick={closeSidebar} className={`text-gray-400 hover:text-white ${focusRingClasses}`}> <Icon name="X" size={24} /> </button>
                </div>
                <div className="hidden md:flex items-center p-4 h-16 border-b border-gray-700">
                    <Icon name="LayoutDashboard" className="h-6 w-6 text-[#0057e7] mr-2" />
                    <h2 className="text-lg font-semibold text-gray-100">Dashboard Menu</h2>
                </div>
                <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
                    {mainNavItems.map(item => <DashboardTab key={item.id} {...item} isActive={activeTab === item.id} onClick={() => handleTabSwitch(item.id)} />)}
                    <p className="px-3 pt-4 pb-2 text-xs font-medium text-gray-500 uppercase">Future Features</p>
                    {futureNavItems.map(item => <DashboardTab key={item.id} {...item} />)}
                </nav>
                <div className="p-4 border-t border-gray-700 mt-auto">
                    {utilityNavItems.map(item => <DashboardTab key={item.id} {...item} onClick={() => handleUtilityAction(item.action)} />)}
                </div>
            </aside>
            <main className="flex-1 flex flex-col overflow-y-auto">
                <header className="sticky top-0 z-10 flex items-center justify-between h-16 px-6 bg-[#1f2937]/90 backdrop-blur-md border-b border-gray-700">
                    <button onClick={toggleSidebar} className={`md:hidden text-gray-300 hover:text-white ${focusRingClasses}`}> <Icon name="Menu" size={24} /> </button>
                    <div className="text-xl font-semibold text-gray-100"> {headerTextMap[activeTab] || 'Dashboard'} </div>
                    <div className="flex items-center space-x-4">
                        <button className={`text-gray-400 hover:text-white relative ${focusRingClasses}`} title="Notifications">
                            <Icon name="Bell" size={22} />
                            <span className="absolute top-0 right-0 block h-2 w-2 rounded-full bg-[#ef4444] ring-2 ring-[#1f2937]"></span>
                        </button>
                        <Icon name="UserCircle" size={28} className="text-gray-400" title="User Profile"/>
                    </div>
                </header>
                <div className="p-6 md:p-10">
                    {activeTab === 'dashboardHome' && <DashboardHomeContent glassPanelClasses={glassPanelClasses} />}
                    {/* Pass switchTab to PoliciesTab - still needed if future functionality uses it */}
                    {activeTab === 'policies' && <PoliciesTab glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} switchTab={switchTab} />}
                    {activeTab === 'properties' && <PropertyTab glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} />}
                    {/* Removed rendering for uploadPolicy tab */}
                    {/* {activeTab === 'uploadPolicy' && <UploadPolicyTab glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses}/>} */}
                    {activeTab === 'reviewPolicy' && <ReviewPolicyChatbot glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses}/>}
                </div>
            </main>
        </div>
    );
});

// DashboardTab component
const DashboardTab = memo(({ iconName, label, isActive, onClick, isDisabled }) => (
    <button onClick={onClick} disabled={isDisabled} className={`flex items-center w-full px-3 py-3 text-sm font-medium rounded-md transition-colors duration-150 ${focusRingClasses} ${isActive ? 'bg-[#0057e7] text-white shadow-md' : 'text-gray-300 hover:bg-gray-700 hover:text-gray-100'} ${isDisabled ? 'opacity-50 cursor-not-allowed' : ''}`} >
        <Icon name={iconName} size={20} />
        <span className="ml-3">{label}</span>
    </button>
));

// DashboardHomeContent component
const DashboardHomeContent = memo(({ glassPanelClasses }) => (
    <div className={`${glassPanelClasses} p-8`}>
        <h1 className="text-3xl font-bold mb-6 text-gray-100">Welcome to ClaimGuardian!</h1>
        <p className="text-gray-300 mb-4 leading-relaxed"> Your central hub for managing properties and insurance policies. Navigate using the tabs:</p>
        <ul className="list-disc list-inside text-gray-300 space-y-2 mb-6">
            <li><strong className="text-[#0057e7]">Policies:</strong> View, manage, and get insights.</li>
            <li><strong className="text-[#0057e7]">Properties:</strong> Add and manage insured assets.</li>
            {/* Updated description for Upload Policy */}
            <li><strong className="text-[#0057e7]">Upload Policy:</strong> Add new insurance documents via the 'Policies' tab.</li>
            <li><strong className="text-[#00e5ff]">Review Policy (Chat):</strong> Ask AI about uploaded policies.</li>
        </ul>
        <p className="text-gray-400 text-sm">More features like claim tracking are coming soon!</p>
        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="bg-gray-700 p-6 rounded-lg shadow-lg">
                <h3 className="text-xl font-semibold text-gray-100 mb-3">Quick Stats (Mock)</h3>
                <p className="text-gray-300">Active Policies: <span className="font-bold text-[#0057e7]">4</span></p>
                <p className="text-gray-300">Properties Managed: <span className="font-bold text-[#0057e7]">4</span></p>
                <p className="text-gray-300">Avg. Premium/Yr: <span className="font-bold text-[#00e5ff]">$787</span></p>
            </div>
            <div className="bg-gray-700 p-6 rounded-lg shadow-lg">
                <h3 className="text-xl font-semibold text-gray-100 mb-3">Next Steps</h3>
                <p className="text-gray-300">1. Explore "Policies" tab.</p>
                <p className="text-gray-300">2. Add a new property or policy.</p>
                <p className="text-gray-300">3. Try "Review Policy" chat.</p>
            </div>
        </div>
    </div>
));

// UploadPolicyTab component (Kept for potential future reuse or direct linking, but not in sidebar)
const UploadPolicyTab = memo(({ glassPanelClasses, focusRingClasses }) => {
    const [selectedFile, setSelectedFile] = useState(null);
    const [uploadStatus, setUploadStatus] = useState('');
    const [uploadMessage, setUploadMessage] = useState('');
    const [policyDetails, setPolicyDetails] = useState(null);
    const fileInputRef = useRef(null);

    const handleFileChange = useCallback((event) => {
        const file = event.target.files[0];
        if (file && file.type === "application/pdf") {
            setSelectedFile(file); setUploadStatus(''); setUploadMessage(''); setPolicyDetails(null);
        } else {
            setSelectedFile(null); setUploadStatus('error'); setUploadMessage('Please select a PDF file.');
        }
    }, []);

    const handleUpload = useCallback(async () => {
        if (!selectedFile) { setUploadStatus('error'); setUploadMessage('Please select a file.'); return; }
        setUploadStatus('uploading'); setUploadMessage(`Uploading ${selectedFile.name}...`);
        try {
            const storagePath = `standalone_policies/${Date.now()}_${selectedFile.name}`;
            const { data: storageData, error: storageError } = await supabase.storage.from('policy_documents').upload(storagePath, selectedFile);
            if (storageError) throw storageError;

            const extractedText = `Mock extracted text: ${selectedFile.name}. Policy #: POL-${Math.random().toString(36).substring(2, 9).toUpperCase()}. Covers general liability.`;
            const parsedData = {
                name: selectedFile.name, type: 'policy', processed_text: extractedText, document_url: storageData.path,
                policy_number: extractedText.match(/Policy #: (\S+)/)?.[1] || 'N/A', carrier: "Unknown (Standalone)",
                property_name: "Unassigned", premium: 0, renewal_date: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                status: "Active", category_key: "general"
            };
            const { data: dbData, error: dbError } = await supabase.from('policy_data').insert([parsedData]);
            if (dbError) throw dbError;

            setPolicyDetails(dbData[0]); setUploadStatus('success');
            setUploadMessage(`${selectedFile.name} uploaded & processed! Link to property later.`);
            setSelectedFile(null); if(fileInputRef.current) fileInputRef.current.value = "";
        } catch (error) {
            console.error("Upload error:", error); setUploadStatus('error');
            setUploadMessage(`Upload failed. ${error.message || 'Unknown error'}`);
        }
    }, [selectedFile]);
    
    const Spinner = () => (<svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"> <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle> <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path> </svg>);

    return ( <div className={`${glassPanelClasses} p-8`}> <h2 className="text-2xl font-semibold mb-6 text-gray-100">Upload Standalone Policy</h2> <p className="text-gray-300 mb-6 leading-relaxed"> Upload a policy (PDF). It will be processed and stored. Link to a property later.</p> <div className="mb-6"> <label htmlFor="file-upload-standalone" className={`${labelBaseClasses} mb-2`}> Select Policy (PDF only) </label> <div className={`mt-1 flex justify-center px-6 pt-5 pb-6 border-2 border-gray-600 border-dashed rounded-md hover:border-[#0057e7] ${focusRingClasses}`}> <div className="space-y-1 text-center"> <Icon name="UploadCloud" className="mx-auto h-12 w-12 text-gray-500" /> <div className="flex text-sm text-gray-400"> <label htmlFor="file-upload-standalone" className={`relative cursor-pointer bg-gray-700 rounded-md font-medium text-[#0057e7] hover:text-[#00e5ff] px-2 py-1 ${focusRingClasses}`} > <span>Upload file</span> <input id="file-upload-standalone" name="file-upload-standalone" type="file" className="sr-only" accept=".pdf" onChange={handleFileChange} ref={fileInputRef} /> </label> <p className="pl-1">or drag & drop</p> </div> <p className="text-xs text-gray-500">PDF up to 10MB</p> </div> </div> {selectedFile && <p className="mt-2 text-sm text-gray-400">Selected: {selectedFile.name}</p>} </div> <button onClick={handleUpload} disabled={!selectedFile || uploadStatus === 'uploading'} className={`${primaryButtonClasses} w-full px-6 py-3 disabled:opacity-50 disabled:cursor-not-allowed`} > {uploadStatus === 'uploading' ? ( <><Spinner /> Processing...</> ) : ( <><Icon name="UploadCloud" size={20} className="mr-2" /> Upload & Process</> )} </button> {uploadMessage && ( <div className={`mt-4 p-4 rounded-md text-sm ${ uploadStatus === 'success' ? 'bg-green-500/30 text-green-300 border border-green-500' : uploadStatus === 'error' ? 'bg-red-500/30 text-red-300 border border-red-500' : 'bg-blue-500/30 text-blue-300 border border-blue-500' }`}> {uploadMessage} </div> )} {policyDetails && uploadStatus === 'success' && ( <div className="mt-6 p-6 bg-gray-700 rounded-lg border border-gray-600"> <h3 className="text-lg font-semibold text-gray-100 mb-3">Processed Policy Info:</h3> <ul className="space-y-1 text-gray-300 text-sm"> <li><strong>Name:</strong> {policyDetails.name}</li> <li><strong>Policy # (Detected):</strong> {policyDetails.policy_number || 'N/A'}</li> <li className="mt-2 pt-2 border-t border-gray-600"> <strong className="text-gray-200">Extracted (Snippet):</strong> <code className="block font-mono text-xs bg-gray-800 text-gray-400 p-2 mt-1 rounded max-h-20 overflow-y-auto"> {policyDetails.processed_text.substring(0, 200)}... </code> </li> </ul> <p className="mt-4 text-sm text-green-300"> Go to "Review Policy (Chat)" to ask questions. </p> </div> )} </div> );
});

// ReviewPolicyChatbot component
const ReviewPolicyChatbot = memo(({ glassPanelClasses, focusRingClasses }) => {
    const [messages, setMessages] = useState([]);
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [showConsentModal, setShowConsentModal] = useState(false);
    const [consentGiven, setConsentGiven] = useState(false);
    const [availableContexts, setAvailableContexts] = useState([]);
    const [selectedContextId, setSelectedContextId] = useState('');
    const [currentContextText, setCurrentContextText] = useState('');
    const [chatHistory, setChatHistory] = useState({});
    const messagesEndRef = useRef(null);

    const suggestedQuestions = ["Deductible?", "Flood coverage?", "Policy period?", "Summarize liability."];

    useEffect(() => {
        if (localStorage.getItem('claimGuardianAiConsent') === 'true') setConsentGiven(true);
        else setShowConsentModal(true);
    }, []);
    
    const handleContextChangeInternal = useCallback((contextId, contextsToUse) => {
        setSelectedContextId(contextId);
        const selectedCtx = contextsToUse.find(ctx => ctx.id === contextId);
        if (selectedCtx) {
            setCurrentContextText(selectedCtx.processed_text);
            const history = chatHistory[contextId] || [{ id: Date.now(), text: `Switched to ${selectedCtx.name}. How can I help?`, sender: 'bot' }];
            setMessages(history);
        } else {
            setCurrentContextText('');
            setMessages([{ id: Date.now(), text: "Please select a policy/document.", sender: 'bot' }]);
        }
    }, [chatHistory]);


    useEffect(() => {
        if (!consentGiven) return;
        const fetchContexts = async () => {
            setIsLoading(true);
            try {
                const { data, error } = await supabase.from('policy_data').select('id, name, type, processed_text');
                if (error) throw error;
                const contexts = (data || []).map(item => ({ id: item.id, name: item.name || `Doc ${item.id}`, type: item.type || 'doc', processed_text: item.processed_text || '' }));
                setAvailableContexts(contexts);
                if (contexts.length > 0) {
                    const currentSelectedValid = contexts.some(ctx => ctx.id === selectedContextId);
                    if (!selectedContextId || !currentSelectedValid) {
                        handleContextChangeInternal(contexts[0].id, contexts);
                    } else { 
                        const ctx = contexts.find(c => c.id === selectedContextId); 
                        if(ctx) setCurrentContextText(ctx.processed_text); 
                    }
                } else {
                    setMessages([{ id: Date.now(), text: "No policies/docs found. Upload one first.", sender: 'bot' }]);
                    setSelectedContextId(''); setCurrentContextText('');
                }
            } catch (error) { console.error("Error fetching contexts:", error); setMessages([{ id: Date.now(), text: "Error loading policies/docs.", sender: 'bot' }]); }
            setIsLoading(false);
        };
        fetchContexts();
    }, [consentGiven, selectedContextId, handleContextChangeInternal]); 

    const handleContextChange = useCallback((contextId) => {
        handleContextChangeInternal(contextId, availableContexts);
    }, [availableContexts, handleContextChangeInternal]);


    useEffect(() => { if (selectedContextId && messages.length > 0) setChatHistory(prev => ({ ...prev, [selectedContextId]: messages })); }, [messages, selectedContextId]);
    useEffect(() => { messagesEndRef.current?.scrollIntoView({ behavior: "smooth" }); }, [messages]);

    const handleSendMessage = useCallback(async (e, question) => {
        if (e) e.preventDefault();
        const query = question || inputValue;
        if (query.trim() === '' || isLoading || !consentGiven) { if (!consentGiven) setShowConsentModal(true); return; }
        if (!selectedContextId) { setMessages(prev => [...prev, {id:Date.now(), text: "Select policy/doc above.", sender: 'bot'}]); return; }

        setMessages(prev => [...prev, { id: Date.now(), text: query, sender: 'user' }]);
        if (!question) setInputValue('');
        setIsLoading(true);
        try {
            const responseText = await mockNlpProcess(query, currentContextText);
            setMessages(prev => [...prev, { id: Date.now() + 1, text: responseText, sender: 'bot' }]);
        } catch (error) { console.error("Chatbot error:", error); setMessages(prev => [...prev, { id: Date.now() + 1, text: "Sorry, issue encountered.", sender: 'bot' }]); }
        setIsLoading(false);
    }, [inputValue, isLoading, consentGiven, selectedContextId, currentContextText]);

    const handleConsent = useCallback((agreed) => {
        if (agreed) {
            localStorage.setItem('claimGuardianAiConsent', 'true'); setConsentGiven(true);
            if (messages.length === 0 && availableContexts.length === 0) setMessages([{ id: Date.now(), text: "Thank you. Upload a policy to begin.", sender: 'bot' }]);
            else if (messages.length === 0 && !selectedContextId && availableContexts.length > 0) setMessages([{ id: Date.now(), text: "Thank you. Select a policy.", sender: 'bot' }]);
        } else { setMessages([{id: Date.now(), text: "AI consent required for this feature.", sender: 'bot'}]); }
        setShowConsentModal(false);
    }, [messages.length, availableContexts.length, selectedContextId]);

    const ConsentModal = useCallback(() => ( <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4"> <div className={`${glassPanelClasses} p-8 max-w-lg w-full`}> <div className="flex items-center mb-4"> <Icon name="HelpCircle" size={24} className="text-[#00e5ff] mr-3" /> <h3 className="text-xl font-semibold text-gray-100">AI Processing Consent</h3> </div> <p className="text-sm text-gray-300 mb-6 leading-relaxed"> ClaimGuardian uses AI to process your policy/document content for answering questions. Data handled securely. Agree to consent. </p> <div className="flex justify-end space-x-3"> <button onClick={() => handleConsent(false)} className={`${secondaryButtonClasses} px-4 py-2`}>Disagree</button> <button onClick={() => handleConsent(true)} className={`${primaryButtonClasses} px-4 py-2`}>Agree</button> </div> </div> </div> ), [handleConsent, glassPanelClasses]);

    if (showConsentModal && !consentGiven) return <ConsentModal />;

    return ( <div className={`${glassPanelClasses} flex flex-col h-[calc(100vh-10rem-4rem)] md:h-[calc(100vh-12rem-4rem)] max-h-[700px] p-0`}> <div className="p-6 border-b border-gray-700"> <h2 className="text-2xl font-semibold text-gray-100 mb-3">Policy Oracle Chat</h2> <div className="flex flex-col sm:flex-row gap-4 items-center"> <label htmlFor="contextSelector" className="text-sm font-medium text-gray-300 whitespace-nowrap">Discussing:</label> <select id="contextSelector" value={selectedContextId} onChange={(e) => handleContextChange(e.target.value)} disabled={!consentGiven || isLoading || availableContexts.length === 0} className={`flex-grow ${inputBaseClasses} disabled:opacity-60`} > <option value="" disabled>{availableContexts.length === 0 ? "No documents available" : "Select Policy/Doc..."}</option> {availableContexts.map(ctx => ( <option key={ctx.id} value={ctx.id}> {ctx.name} ({ctx.type === 'policy' ? 'Policy' : 'Document'}) </option> ))} </select> </div> </div> <div className="flex-grow p-6 space-y-4 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-700"> {messages.map(msg => ( <div key={msg.id} className={`flex ${msg.sender === 'user' ? 'justify-end' : 'justify-start'}`}> <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-xl shadow ${ msg.sender === 'user' ? 'bg-[#0057e7] text-white rounded-br-none' : 'bg-gray-700 text-gray-200 rounded-bl-none' }`} > <p className="text-sm whitespace-pre-wrap">{msg.text}</p> </div> </div> ))} {isLoading && messages.length > 0 && messages[messages.length-1].sender === 'user' && ( <div className="flex justify-start"> <div className="max-w-xs lg:max-w-md px-4 py-3 rounded-xl shadow bg-gray-700 text-gray-200 rounded-bl-none"> <div className="flex items-center"> <div className="animate-pulse flex space-x-1"> <div className="w-1.5 h-1.5 bg-gray-400 rounded-full"></div> <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animation-delay-200"></div> <div className="w-1.5 h-1.5 bg-gray-400 rounded-full animation-delay-400"></div> </div> <span className="text-sm ml-2">Assistant is typing...</span> </div> </div> </div> )} <div ref={messagesEndRef} /> </div> {consentGiven && selectedContextId && messages.length <= 2 && availableContexts.find(c => c.id === selectedContextId) && ( <div className="p-4 border-t border-gray-700"> <p className="text-xs text-gray-400 mb-2 text-center">Or try asking:</p> <div className="flex flex-wrap justify-center gap-2"> {suggestedQuestions.slice(0,3).map(q => ( <button key={q} onClick={(e) => handleSendMessage(null, q)} disabled={isLoading} className={`px-3 py-1.5 text-xs rounded-full bg-gray-600 hover:bg-gray-500 text-gray-200 transition-colors ${focusRingClasses} disabled:opacity-60`} > {q} </button> ))} </div> </div> )} <form onSubmit={handleSendMessage} className="p-4 border-t border-gray-700"> <div className="flex items-center space-x-2"> <input type="text" value={inputValue} onChange={(e) => setInputValue(e.target.value)} placeholder={!consentGiven ? "Grant consent to chat" : isLoading ? "Assistant typing..." : !selectedContextId ? "Select doc to chat" : "Ask about your policy..."} className={`flex-grow ${inputBaseClasses}`} disabled={isLoading || !consentGiven || !selectedContextId} /> <button type="submit" disabled={isLoading || inputValue.trim() === '' || !consentGiven || !selectedContextId} className={`${primaryButtonClasses} px-6 py-3 disabled:opacity-50`} > Send </button> </div> </form> </div> );
});

// PropertyTab component
const PropertyTab = memo(({ glassPanelClasses, focusRingClasses }) => {
    const [currentView, setCurrentView] = useState('list');
    const [selectedProperty, setSelectedProperty] = useState(null);
    const [properties, setProperties] = useState([]);
    const [isLoading, setIsLoading] = useState(true);

    const fetchProperties = useCallback(async () => {
        setIsLoading(true);
        const { data, error } = await supabase.from('properties').select();
        if (error) console.error("Error fetching properties:", error);
        else setProperties(data || []);
        setIsLoading(false);
    }, []);

    useEffect(() => { fetchProperties(); }, [fetchProperties]);

    const handleViewDetail = useCallback((property) => { setSelectedProperty(property); setCurrentView('detail'); }, []);
    const handleAddNewProperty = useCallback(() => { setSelectedProperty(null); setCurrentView('form'); }, []);
    const handleBackToList = useCallback(() => setCurrentView('list'), []);

    const handleFormSubmit = useCallback(async (submittedFormData) => {
        setIsLoading(true);
        // console.log("Property form to submit:", submittedFormData);
        const newPropertyRecord = {
            name: submittedFormData.nickname,
            address: submittedFormData.fullAddress || 'N/A',
            county: submittedFormData.county || null,
            description: submittedFormData.description || null,
            category_key: submittedFormData.category,
            ...(submittedFormData.categoryDetails || {}),
            image_url: `https://placehold.co/600x400/1f2937/4a5568?text=${encodeURIComponent(submittedFormData.nickname)}`,
            created_at: new Date().toISOString(),
            value: Math.floor(Math.random() * 1000000), 
            latitude: (Math.random() * 180 - 90).toFixed(4), 
            longitude: (Math.random() * 360 - 180).toFixed(4), 
        };
        const categoryLabel = propertyCategoryConfig[submittedFormData.category]?.label || 'Unknown';
        let specificType = '';
        if (submittedFormData.category === 'real_estate') specificType = submittedFormData.categoryDetails?.propertyType;
        else if (submittedFormData.category === 'vehicle') specificType = `${submittedFormData.categoryDetails?.year} ${submittedFormData.categoryDetails?.make} ${submittedFormData.categoryDetails?.model}`;
        newPropertyRecord.type = `${categoryLabel}${specificType ? ` - ${specificType}` : ''}`;

        const { data: propertyInsertData, error: propertyInsertError } = await supabase.from('properties').insert([newPropertyRecord]);
        if (propertyInsertError) { console.error("Error inserting property:", propertyInsertError); alert(`Error: ${propertyInsertError.message}`); setIsLoading(false); return; }

        const newPropertyId = propertyInsertData[0].id;

        if (submittedFormData.isInsured === 'yes' && submittedFormData.insurancePolicies) {
            const policyRecordsToInsert = [];
            for (const policy of submittedFormData.insurancePolicies) {
                if (policy.carrier && policy.policyNumber && policy.policyDocument) {
                    let documentUrl = 'mock_path/default_policy.pdf';
                    if (policy.policyDocument instanceof File) {
                        const { data: storageData, error: storageError } = await supabase.storage.from('policy_documents')
                            .upload(`property_${newPropertyId}/${policy.coverageType}_${policy.policyDocument.name}`, policy.policyDocument);
                        if (storageError) console.warn(`Upload failed for ${policy.coverageType}: ${storageError.message}`);
                        else documentUrl = storageData.path;
                    }
                    policyRecordsToInsert.push({
                        name: `${policy.coverageType} for ${submittedFormData.nickname}`, type: 'policy', policy_number: policy.policyNumber,
                        carrier: policy.carrier, property_id: newPropertyId, property_name: submittedFormData.nickname,
                        premium: parseFloat(policy.premium) || 0,
                        renewal_date: policy.expirationDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
                        effective_date: policy.effectiveDate || new Date().toISOString().split('T')[0],
                        status: 'Active', coverage_types: [policy.coverageType],
                        processed_text: `Policy for ${policy.coverageType} - Carrier: ${policy.carrier}, #: ${policy.policyNumber}. Doc: ${documentUrl}`,
                        document_url: documentUrl, category_key: submittedFormData.category,
                    });
                }
            }
            if (policyRecordsToInsert.length > 0) {
                const { error: policyInsertError } = await supabase.from('policy_data').insert(policyRecordsToInsert);
                if (policyInsertError) console.error("Error inserting linked policies:", policyInsertError);
            }
        }
        await fetchProperties(); 
        setCurrentView('list'); 
        setIsLoading(false);
    }, [fetchProperties]);

    if (isLoading && currentView === 'list') return <div className={`${glassPanelClasses} p-8 text-center`}><div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0057e7] mx-auto"></div><p className="mt-4">Loading properties...</p></div>;

    return (
        <div>
            {currentView === 'list' && <PropertyList properties={properties} onViewDetail={handleViewDetail} onAddNew={handleAddNewProperty} glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} />}
            {currentView === 'detail' && selectedProperty && <PropertyDetail property={selectedProperty} onBack={handleBackToList} glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} />}
            {currentView === 'form' && <PropertyForm onCancel={handleBackToList} onSubmit={handleFormSubmit} glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} />}
        </div>
    );
});

// PropertyList component
const PropertyList = memo(({ properties, onViewDetail, onAddNew, glassPanelClasses, focusRingClasses }) => {
    const [searchTerm, setSearchTerm] = useState('');
    const filteredProperties = properties.filter(prop =>
        (prop.name?.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (prop.address?.toLowerCase().includes(searchTerm.toLowerCase())) ||
        (prop.type?.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    return (
        <div className="space-y-6">
            <div className={`${glassPanelClasses} p-4 md:p-6 flex flex-col md:flex-row justify-between items-center gap-4`}>
                <h2 className="text-xl font-semibold text-gray-100 w-full md:w-auto text-center md:text-left">Your Properties</h2>
                <div className="flex flex-wrap items-center gap-2 md:gap-4 w-full md:w-auto justify-center md:justify-end">
                    <div className="relative flex-grow md:flex-grow-0 w-full sm:w-auto max-w-xs">
                        <input type="text" placeholder="Search..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className={`${inputBaseClasses} pr-8`} />
                        <Icon name="Search" size={18} className="absolute right-2.5 top-1/2 transform -translate-y-1/2 text-gray-400" />
                    </div>
                    <button onClick={() => alert("Filter TBD")} className={secondaryButtonClasses}><Icon name="Filter" size={16} /> Filter</button>
                    <button onClick={onAddNew} className={`${primaryButtonClasses} px-4 py-2`} > <Icon name="PlusCircle" size={18} /> Add Property </button>
                </div>
            </div>
            <div className={`${glassPanelClasses} p-6 text-center`}>
                <Icon name="MapPin" size={48} className="mx-auto text-[#0057e7] mb-2" />
                <h3 className="text-xl font-semibold text-gray-100">Property Locations Overview</h3>
                <p className="text-gray-400 text-sm mt-2">(Map visualization TBD)</p>
                <div className="mt-4 h-64 bg-gray-700 rounded-md flex items-center justify-center text-gray-500">[Map Placeholder]</div>
            </div>
            {filteredProperties.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {filteredProperties.map(prop => ( <PropertyCard key={prop.id} property={prop} onViewDetail={onViewDetail} glassCardClasses={glassPanelClasses} focusRingClasses={focusRingClasses} /> ))}
                </div>
            ) : (
                <div className={`${glassPanelClasses} p-8 text-center`}> <Icon name="Building" size={48} className="mx-auto text-gray-500 mb-4" /> <h3 className="text-xl font-semibold text-gray-100">No Properties Found</h3> <p className="text-gray-400 mt-2">{searchTerm ? "No properties match search." : "Add properties to get started."}</p> </div>
            )}
        </div>
    );
});

// PropertyCard component
const PropertyCard = memo(({ property, onViewDetail, glassCardClasses, focusRingClasses }) => {
    const handleViewDetail = useCallback(() => {
        onViewDetail(property);
    }, [onViewDetail, property]);

    return (
    <div className={`${glassCardClasses} flex flex-col justify-between cursor-pointer hover:border-[#0057e7]/50 transition-all group p-5`} onClick={handleViewDetail}>
        <div>
            <img src={property.image_url || `https://placehold.co/600x400/1f2937/4a5568?text=${encodeURIComponent(property.name)}`} alt={property.name} className="w-full h-48 object-cover rounded-md mb-4" onError={(e) => e.target.src='https://placehold.co/600x400/1f2937/4a5568?text=Error'}/>
            <h3 className="text-xl font-semibold text-gray-100 mb-1 group-hover:text-[#00e5ff]">{property.name}</h3>
            <p className="text-sm text-gray-400 mb-1 flex items-center"><Icon name="MapPin" size={14} className="mr-1.5 shrink-0" /> {property.address}</p>
            <p className="text-sm text-gray-500 mb-2">{property.type}</p>
        </div>
        <div className="mt-auto pt-3 border-t border-white/10">
            <div className="flex justify-between items-center text-sm">
                <span className="text-gray-400">Value: <span className="font-semibold text-gray-200">${property.value?.toLocaleString() || 'N/A'}</span></span>
                <button className={`text-xs text-[#0057e7] hover:text-[#00e5ff] font-semibold py-1 px-2 rounded-md group-hover:bg-gray-700 ${focusRingClasses}`}> View <Icon name="Eye" size={14} className="inline ml-1" /> </button>
            </div>
            <p className="text-xs text-gray-500 mt-1">Added: {new Date(property.created_at).toLocaleDateString()}</p>
        </div>
    </div>
)});

// PropertyDetail component
const PropertyDetail = memo(({ property, onBack, glassPanelClasses, focusRingClasses }) => {
    const [activeSubTab, setActiveSubTab] = useState('location');
    const DetailTabButton = memo(({ label, tabName, iconName, currentTab, onTabChange }) => ( <button onClick={() => onTabChange(tabName)} className={`flex items-center gap-2 px-4 py-2.5 text-sm rounded-t-md ${focusRingClasses} ${currentTab === tabName ? 'bg-gray-700 text-[#00e5ff]' : 'text-gray-300 hover:bg-gray-600'}`} > <Icon name={iconName} size={16} /> {label} </button> ));
    
    const handleTabChange = useCallback(tabName => setActiveSubTab(tabName), []);

    return ( <div className={`${glassPanelClasses} p-0`}> <div className="p-6 flex justify-between items-center border-b border-white/10"> <h2 className="text-2xl font-semibold text-gray-100">{property.name}</h2> <button onClick={onBack} className={`${secondaryButtonClasses} px-4 py-2`}> <Icon name="ChevronLeft" size={20} /> Back </button> </div> <div className="p-6 grid grid-cols-1 lg:grid-cols-3 gap-6"> <div className="lg:col-span-1 space-y-6"> <img src={property.image_url || `https://placehold.co/600x400/1f2937/4a5568?text=${property.name}`} alt={property.name} className="w-full h-auto object-cover rounded-lg shadow-lg" onError={(e)=>e.target.src='https://placehold.co/600x400/1f2937/4a5568?text=Error'}/> <div className="bg-gray-700/50 p-4 rounded-lg space-y-1 text-sm"> <h3 className="text-lg font-semibold text-gray-200 border-b border-gray-600 pb-2 mb-2">Key Info</h3> <p><strong>Type:</strong> {property.type}</p> <p><strong>Address:</strong> {property.address}</p> <p><strong>Value:</strong> ${property.value?.toLocaleString() || 'N/A'}</p> {Object.entries({Bedrooms: property.bedrooms, Bathrooms: property.bathrooms, SqFt: property.sqft?.toLocaleString(), Make: property.make, Model: property.model, Year: property.year}).filter(([_,val])=>val).map(([key,val])=><p key={key}><strong>{key}:</strong> {val}</p>)} </div> </div> <div className="lg:col-span-2"> <div className="flex border-b border-gray-700 mb-0"> <DetailTabButton label="Details" tabName="location" iconName="Info" currentTab={activeSubTab} onTabChange={handleTabChange} /> <DetailTabButton label="Map" tabName="map" iconName="Map" currentTab={activeSubTab} onTabChange={handleTabChange} /> <DetailTabButton label="Docs" tabName="documents" iconName="FileDigit" currentTab={activeSubTab} onTabChange={handleTabChange} /> <DetailTabButton label="Clients" tabName="clients" iconName="Users" currentTab={activeSubTab} onTabChange={handleTabChange} /> </div> <div className="py-6 bg-gray-800/30 rounded-b-lg min-h-[300px] px-6 space-y-3 text-sm"> {activeSubTab === 'location' && (<> <h4 className="text-lg font-semibold text-gray-200">Property Metrics</h4> {Object.entries({'Lot Size': property.lot_size && `${property.lot_size} acres`, 'Year Built': property.year_built, VIN: property.vin, County: property.county, Description: property.description}).filter(([_,val])=>val).map(([key,val])=><p key={key}><strong>{key}:</strong> {val}</p>)} </>)} {activeSubTab === 'map' && (<> <h4 className="text-lg font-semibold text-gray-200 mb-2">Interactive Map</h4> <div className="h-64 bg-gray-700 rounded-md flex items-center justify-center text-gray-500">[Map: {property.address}]</div> </>)} {activeSubTab === 'documents' && (<> <h4 className="text-lg font-semibold text-gray-200 mb-3">Associated Documents</h4> <p className="text-gray-400">(Docs TBD)</p> </>)} {activeSubTab === 'clients' && (<> <h4 className="text-lg font-semibold text-gray-200 mb-3">Associated Clients</h4> <p className="text-gray-400">(Clients TBD)</p> </>)} </div> </div> </div> <div className="p-6 grid grid-cols-1 md:grid-cols-2 gap-6 border-t border-white/10"> <div className="bg-gray-700/50 p-4 rounded-lg"> <h3 className="text-lg font-semibold text-gray-200 mb-2 flex items-center"><Icon name="ShieldAlert" size={20} className="mr-2 text-yellow-400" /> Insurability (Mock)</h3> <p className="text-3xl font-bold text-green-400 mb-1">B+</p> </div> <div className="bg-gray-700/50 p-4 rounded-lg"> <h3 className="text-lg font-semibold text-gray-200 mb-2 flex items-center"><Icon name="DollarSign" size={20} className="mr-2 text-[#00e5ff]" /> Est. Premium (Mock)</h3> <p className="text-3xl font-bold text-gray-100 mb-1">$1,250/yr</p> <button className={`${primaryButtonClasses} mt-3 w-full py-2`}> Request Quote </button> </div> </div> </div> );
});

// Configuration for property categories
const propertyCategoryConfig = {
    real_estate: { label: "Real Estate", iconName: "Building", step1Fields: [ { name: 'propertyType', label: 'Type', type: 'select', options: ["Primary Residence", "Secondary", "Investment", "Land"], required: true }, { name: 'yearBuilt', label: 'Year Built', type: 'number', orField: 'sqft' }, { name: 'sqft', label: 'SqFt', type: 'number', orField: 'yearBuilt' }, ], insuranceCoverageTypes: ["Homeowners/Casualty", "Flood", "Earthquake", "Renters", "Wind"] },
    vehicle: { label: "Vehicle", iconName: "Car", step1Fields: [ { name: 'year', label: 'Year', type: 'number', required: true }, { name: 'make', label: 'Make', type: 'text', required: true }, { name: 'model', label: 'Model', type: 'text', required: true }, { name: 'vin', label: 'VIN', type: 'text', required: true }, ], insuranceCoverageTypes: ["Auto Liability", "Collision/Comp", "Classic", "GAP"] },
    watercraft: { label: "Watercraft", iconName: "Sailboat", step1Fields: [ { name: 'year', label: 'Year', type: 'number', required: true }, { name: 'make', label: 'Make', type: 'text', required: true }, { name: 'model', label: 'Model', type: 'text', required: true }, { name: 'hin', label: 'HIN', type: 'text', required: true }, ], insuranceCoverageTypes: ["Hull", "Liability", "Trailer"] },
    rec_vehicle: { label: "Rec Vehicle", iconName: "Bike", step1Fields: [ { name: 'recVehicleType', label: 'Type', type: 'select', options: ["RV/Motorhome", "Travel Trailer", "ATV", "Snowmobile", "Other"], required: true }, { name: 'vinOrSerial', label: 'VIN/Serial #', type: 'text', required: true }, ], insuranceCoverageTypes: ["Motorhome", "Travel-Trailer", "Contents"] },
    valuables: { label: "Valuables", iconName: "Gem", step1Fields: [ { name: 'itemCategory', label: 'Category', type: 'select', options: ["Jewelry", "Art", "Collectibles", "Electronics", "Firearms", "Other"], required: true }, { name: 'itemTitle', label: 'Title/Desc', type: 'textarea', required: true }, ], insuranceCoverageTypes: ["Scheduled Personal Property", "Fine Art", "Jewelry"] },
};

// PropertyForm component
const PropertyForm = memo(({ onCancel, onSubmit, glassPanelClasses, focusRingClasses }) => {
    const [step, setStep] = useState(0);
    const [formData, setFormData] = useState({ category: '', nickname: '', fullAddress: '', county: '', description: '', categoryDetails: {}, isInsured: '', selectedCoverageTypes: {}, insurancePolicies: [] });
    const currentCategoryConfig = formData.category ? propertyCategoryConfig[formData.category] : null;

    const isStepValid = useCallback((currentStep) => {
        if (currentStep === 0) return !!formData.category;
        if (currentStep === 1) {
            if (!formData.nickname || !formData.fullAddress) return false;
            if (currentCategoryConfig?.step1Fields) {
                for (const field of currentCategoryConfig.step1Fields) {
                    if (field.required && !formData.categoryDetails[field.name]) {
                        if (field.orField && formData.categoryDetails[field.orField]) continue;
                        return false;
                    }
                }
            }
            return true;
        }
        if (currentStep === 2) {
            if (formData.isInsured === 'no') return true;
            if (formData.isInsured === 'yes') {
                for (const policy of formData.insurancePolicies.filter(p => formData.selectedCoverageTypes[p.coverageType])) {
                    if (!policy.carrier || !policy.policyNumber || !policy.policyDocument) return false;
                }
            }
            return true;
        }
        return false;
    }, [formData, currentCategoryConfig]);

    const handleCategorySelect = useCallback((categoryKey) => setFormData(prev => ({ ...prev, category: categoryKey, categoryDetails: {}, isInsured: '', selectedCoverageTypes: {}, insurancePolicies: [] })), []);
    const handleChange = useCallback((e) => { const { name, value, type, checked } = e.target; const val = type === 'checkbox' ? checked : value; if (name.startsWith('categoryDetails.')) { const detailKey = name.split('.')[1]; setFormData(prev => ({ ...prev, categoryDetails: { ...prev.categoryDetails, [detailKey]: val } })); } else if (name.startsWith('insurancePolicy_')) { const [_, coverageType, fieldKey] = name.split('_'); setFormData(prev => ({ ...prev, insurancePolicies: prev.insurancePolicies.map(p => p.coverageType === coverageType ? { ...p, [fieldKey]: val } : p) })); } else { setFormData(prev => ({ ...prev, [name]: val })); } }, []);
    const handleCoverageTypeChange = useCallback((coverageType, isChecked) => { setFormData(prev => { const newSelected = { ...prev.selectedCoverageTypes, [coverageType]: isChecked }; let newPolicies = [...prev.insurancePolicies]; if (isChecked && !newPolicies.find(p => p.coverageType === coverageType)) { newPolicies.push({ coverageType, carrier: '', policyNumber: '', policyDocument: null, effectiveDate: '', expirationDate: '', premium: '' }); } return { ...prev, selectedCoverageTypes: newSelected, insurancePolicies: newPolicies }; }); }, []);
    const handlePolicyFileChange = useCallback((e, coverageType) => { const file = e.target.files[0]; setFormData(prev => ({ ...prev, insurancePolicies: prev.insurancePolicies.map(p => p.coverageType === coverageType ? { ...p, policyDocument: file } : p) })); }, []);

    const nextStep = useCallback(() => { if (isStepValid(step)) setStep(s => s + 1); else alert("Fill required fields."); }, [step, isStepValid]);
    const prevStep = useCallback(() => setStep(s => Math.max(0, s - 1)), []);
    const handleSubmit = useCallback((e) => { e.preventDefault(); if (!isStepValid(step)) { alert("Ensure all fields are filled."); return; } for (let i = 0; i <= step; i++) { if (!isStepValid(i)) { alert(`Complete Step ${i + 1}.`); setStep(i); return; } } onSubmit(formData); }, [step, isStepValid, onSubmit, formData]);

    const totalWizardSteps = 3;

    const renderStep1CategoryFields = () => currentCategoryConfig?.step1Fields?.map(field => ( <div key={field.name}> <label htmlFor={`catD.${field.name}`} className={labelBaseClasses}>{field.label} {field.required && <span className="text-red-500">*</span>}{field.orField && <span className="text-xs text-gray-400"> (or {propertyCategoryConfig[formData.category]?.step1Fields.find(f=>f.name === field.orField)?.label})</span>}</label> {field.type === 'select' ? ( <select name={`categoryDetails.${field.name}`} id={`catD.${field.name}`} value={formData.categoryDetails[field.name] || ''} onChange={handleChange} className={inputBaseClasses} required={field.required}> <option value="" disabled>Select...</option> {field.options.map(opt => <option key={opt} value={opt}>{opt}</option>)} </select> ) : field.type === 'textarea' ? ( <textarea name={`categoryDetails.${field.name}`} id={`catD.${field.name}`} value={formData.categoryDetails[field.name] || ''} onChange={handleChange} className={inputBaseClasses} placeholder={field.placeholder} rows="3" required={field.required}></textarea> ) : ( <input type={field.type} name={`categoryDetails.${field.name}`} id={`catD.${field.name}`} value={formData.categoryDetails[field.name] || ''} onChange={handleChange} className={inputBaseClasses} placeholder={field.placeholder} required={field.required && !(field.orField && formData.categoryDetails[field.orField])} /> )} </div> ));
    const renderInsuranceMiniForms = () => currentCategoryConfig && formData.isInsured === 'yes' && formData.insurancePolicies.filter(p => formData.selectedCoverageTypes[p.coverageType]).map(policy => ( <div key={policy.coverageType} className="p-4 mt-4 border border-gray-600 rounded-lg bg-gray-800/50 space-y-3"> <h4 className="text-md font-semibold text-[#00e5ff]">{policy.coverageType} Policy</h4> <div><label className={labelBaseClasses}>Carrier <span className="text-red-500">*</span></label><input type="text" name={`insurancePolicy_${policy.coverageType}_carrier`} value={policy.carrier} onChange={handleChange} className={inputBaseClasses} required /></div> <div><label className={labelBaseClasses}>Policy # <span className="text-red-500">*</span></label><input type="text" name={`insurancePolicy_${policy.coverageType}_policyNumber`} value={policy.policyNumber} onChange={handleChange} className={inputBaseClasses} required /></div> <div><label className={labelBaseClasses}>Policy Doc (PDF) <span className="text-red-500">*</span></label><input type="file" name={`insurancePolicy_${policy.coverageType}_policyDocument`} accept=".pdf" onChange={(e) => handlePolicyFileChange(e, policy.coverageType)} className={`w-full text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-md file:border-0 file:text-sm file:font-semibold file:bg-[#0057e7] file:text-white hover:file:bg-[#004abc] ${focusRingClasses}`} required={!policy.policyDocument} /> {policy.policyDocument && <span className="text-xs text-green-400 ml-2">{typeof policy.policyDocument === 'string' ? policy.policyDocument.split('/').pop() : policy.policyDocument.name}</span>}</div> </div> ));

    return ( <div className={`${glassPanelClasses} p-6 md:p-8`}> <div className="flex justify-between items-center mb-6"> <h2 className="text-2xl font-semibold text-gray-100">{step === 0 ? "Select Property Category" : `Add Property (Step ${step} of ${totalWizardSteps-1})`}</h2> <button type="button" onClick={onCancel} className={`${secondaryButtonClasses} px-4 py-2`}>Cancel</button> </div> <div className="w-full bg-gray-700 rounded-full h-2.5 mb-8"><div className="bg-[#0057e7] h-2.5 rounded-full transition-all" style={{ width: `${(step / (totalWizardSteps-1)) * 100}%` }}></div></div> <form onSubmit={handleSubmit} className="space-y-6"> {step === 0 && ( <section> <h3 className="text-xl font-semibold text-gray-200 mb-1">What type of property?</h3> <p className="text-sm text-gray-400 mb-4">Helps tailor next steps.</p> <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4"> {Object.entries(propertyCategoryConfig).map(([key, { label, iconName }]) => ( <button type="button" key={key} onClick={() => handleCategorySelect(key)} className={`p-4 border rounded-lg flex flex-col items-center justify-center aspect-square transition-all relative ${focusRingClasses} ${formData.category === key ? 'border-[#00e5ff] bg-[#0057e7]/20 ring-2 ring-[#00e5ff]' : 'border-gray-600 hover:border-gray-500 hover:bg-gray-700/50'}`}> <Icon name={iconName} size={32} className={`mb-2 ${formData.category === key ? 'text-[#00e5ff]' : 'text-gray-400'}`} /> <span className={`text-sm font-medium ${formData.category === key ? 'text-white' : 'text-gray-300'}`}>{label}</span> {formData.category === key && <Icon name="Check" size={16} className="absolute top-2 right-2 text-[#00e5ff]" />} </button> ))} </div> </section> )} {step === 1 && formData.category && ( <section className="space-y-4"> <h3 className="text-xl font-semibold text-gray-200 mb-1">Property Basics & Details</h3> <p className="text-sm text-gray-400 mb-4">About your {currentCategoryConfig?.label.toLowerCase()}. <span className="text-red-500">*</span> required.</p> <div><label htmlFor="nickname" className={labelBaseClasses}>Nickname <span className="text-red-500">*</span></label><input type="text" name="nickname" value={formData.nickname} onChange={handleChange} className={inputBaseClasses} required /></div> <div><label htmlFor="fullAddress" className={labelBaseClasses}>Full Address <span className="text-red-500">*</span></label><input type="text" name="fullAddress" value={formData.fullAddress} onChange={handleChange} className={inputBaseClasses} required /></div> <div><label htmlFor="county" className={labelBaseClasses}>County</label><input type="text" name="county" value={formData.county} onChange={handleChange} className={inputBaseClasses} /></div> <div><label htmlFor="description" className={labelBaseClasses}>Description (Opt.)</label><textarea name="description" value={formData.description} onChange={handleChange} rows="2" className={inputBaseClasses}></textarea></div> <hr className="border-gray-700 my-6" /> <h4 className="text-lg font-semibold text-gray-200">{currentCategoryConfig?.label} Specifics</h4> {renderStep1CategoryFields()} </section> )} {step === 2 && formData.category && ( <section className="space-y-4"> <h3 className="text-xl font-semibold text-gray-200 mb-1">Insurance Info</h3> <p className="text-sm text-gray-400 mb-4">Is this {currentCategoryConfig?.label.toLowerCase()} insured?</p> <div className="flex items-center space-x-4 mb-4"> <label className="flex items-center space-x-2 cursor-pointer"><input type="radio" name="isInsured" value="yes" checked={formData.isInsured === 'yes'} onChange={handleChange} className="form-radio h-4 w-4 text-[#0057e7]" /><span>Yes</span></label> <label className="flex items-center space-x-2 cursor-pointer"><input type="radio" name="isInsured" value="no" checked={formData.isInsured === 'no'} onChange={handleChange} className="form-radio h-4 w-4 text-[#0057e7]" /><span>No</span></label> </div> {formData.isInsured === 'yes' && currentCategoryConfig?.insuranceCoverageTypes && (<> <p className="text-sm text-gray-300 mb-2">Select applicable coverage types:</p> <div className="grid grid-cols-2 sm:grid-cols-3 gap-3 mb-4"> {currentCategoryConfig.insuranceCoverageTypes.map(type => ( <label key={type} className="flex items-center space-x-2 p-2.5 bg-gray-700/60 border border-gray-600 rounded-md hover:bg-gray-600/80 cursor-pointer has-[:checked]:bg-[#0057e7]/30 has-[:checked]:border-[#0057e7]"> <input type="checkbox" checked={!!formData.selectedCoverageTypes[type]} onChange={(e) => handleCoverageTypeChange(type, e.target.checked)} className="form-checkbox h-4 w-4 text-[#0057e7] bg-gray-800 rounded focus:ring-[#00e5ff]" /> <span className="text-sm text-gray-200">{type}</span> </label> ))} </div> {renderInsuranceMiniForms()} </>)} {formData.isInsured === 'no' && <p className="text-center text-gray-400 p-4 bg-gray-700/30 rounded-md">No problem. Add insurance later.</p>} </section> )} <div className="flex justify-between items-center pt-6 border-t border-gray-700"> <button type="button" onClick={onCancel} className={`${secondaryButtonClasses} px-6 py-2.5`}>Cancel</button> <div className="space-x-3"> {step > 0 && (<button type="button" onClick={prevStep} className={`${secondaryButtonClasses} px-6 py-2.5`}><Icon name="ChevronLeft" size={18} className="inline mr-1" /> Previous</button>)} {step < (totalWizardSteps - 1) && (<button type="button" onClick={nextStep} disabled={!isStepValid(step)} className={`${primaryButtonClasses} px-6 py-2.5 disabled:opacity-50`}>Next <Icon name="ChevronRight" size={18} className="inline ml-1" /></button>)} {step === (totalWizardSteps - 1) && (<button type="submit" disabled={!isStepValid(step)} className={`${primaryButtonClasses} px-6 py-2.5 bg-gradient-to-r from-green-500 to-teal-400 hover:from-green-600 hover:to-teal-500 disabled:opacity-50`}><Icon name="FilePlus" size={18} className="inline mr-1" /> Add Property</button>)} </div> </div> </form> </div> );
});

// PoliciesTab component
const PoliciesTab = memo(({ glassPanelClasses, focusRingClasses, switchTab }) => {
    const [policies, setPolicies] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const [activeFilters, setActiveFilters] = useState({ category: null, status: null, carrier: null, renewalIn30Days: false });
    const [showDetailsDrawer, setShowDetailsDrawer] = useState(false);
    const [selectedPolicyForDetail, setSelectedPolicyForDetail] = useState(null);

    const filterOptions = { categories: ["All", "Real Estate", "Vehicle", "Watercraft", "Valuables", "General"], statuses: ["All", "Active", "Lapsed", "Draft", "Expiring Soon"], carriers: ["All", "State Farm", "Geico", "Chubb", "Progressive", "Unknown (Standalone)", "Other"], };

    const fetchPolicies = useCallback(async () => {
        setIsLoading(true);
        const { data, error } = await supabase.from('policy_data').select(`id, name, policy_number, carrier, property_name, premium, renewal_date, status, category_key, coverage_types, document_url`);
        if (error) { console.error("Error fetching policies:", error); setPolicies([]); }
        else setPolicies(data || []);
        setIsLoading(false);
    }, []);

    useEffect(() => { fetchPolicies(); }, [fetchPolicies]);

    const handleFilterChange = useCallback((type, value) => setActiveFilters(prev => ({ ...prev, [type]: value === "All" || value === "" ? null : value })), []);
    const toggleRenewalFilter = useCallback(() => setActiveFilters(prev => ({ ...prev, renewalIn30Days: !prev.renewalIn30Days })), []);

    const filteredPolicies = policies.filter(p => {
        const thirtyDaysFromNow = new Date(); thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);
        return (activeFilters.category ? p.category_key === activeFilters.category : true) &&
               (activeFilters.status ? p.status.toLowerCase() === activeFilters.status.toLowerCase() : true) &&
               (activeFilters.carrier ? p.carrier === activeFilters.carrier : true) &&
               (activeFilters.renewalIn30Days ? new Date(p.renewal_date) <= thirtyDaysFromNow && new Date(p.renewal_date) >= new Date() && p.status === 'Active' : true) &&
               (searchTerm ? (p.policy_number?.toLowerCase().includes(searchTerm.toLowerCase()) || p.carrier?.toLowerCase().includes(searchTerm.toLowerCase()) || p.property_name?.toLowerCase().includes(searchTerm.toLowerCase()) || p.name?.toLowerCase().includes(searchTerm.toLowerCase())) : true);
    });
    
    const openPolicyDetails = useCallback((policy) => { setSelectedPolicyForDetail(policy); setShowDetailsDrawer(true); }, []);
    const closePolicyDetails = useCallback(() => setShowDetailsDrawer(false), []);

    // Updated Add/Upload button handler
    const handleAddUploadPolicy = useCallback(() => {
        // Instead of switching tabs, show an alert or potentially open a modal in the future
        alert("Policy upload functionality TBD within this tab.");
        // If you wanted to reuse the UploadPolicyTab component in a modal,
        // you would manage modal state here and render UploadPolicyTab inside the modal.
    }, []);


    const activePoliciesCount = policies.filter(p => p.status === 'Active').length;
    const totalPremium = policies.filter(p => p.status === 'Active').reduce((sum, p) => sum + (p.premium || 0), 0);
    const avgPremium = activePoliciesCount > 0 ? Math.round(totalPremium / activePoliciesCount) : 0;
    const expiringSoonCount = policies.filter(p => { const r = new Date(p.renewal_date); const today = new Date(); const ninetyDaysFromToday = new Date(new Date().setDate(today.getDate() + 90)); return p.status === 'Active' && r >= today && r <= ninetyDaysFromToday; }).length;
    const aiGapWarningsCount = 2; 

    return ( <div className="space-y-6"> <div className={`${glassPanelClasses} p-4 md:p-6 flex flex-col md:flex-row justify-between items-center gap-4`}> <h2 className="text-2xl font-semibold text-gray-100">Policies</h2> <div className="flex items-center gap-3 flex-wrap justify-center md:justify-end"> <div className="relative"><input type="search" placeholder="Search..." value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className={`${inputBaseClasses} p-2.5 pr-10 w-full sm:w-auto`} /><Icon name="Search" size={18} className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" /></div> {/* Updated onClick handler */} <button onClick={handleAddUploadPolicy} className={`${primaryButtonClasses} px-4 py-2.5`}><Icon name="PlusCircle" size={18} /> Add/Upload</button> <button onClick={() => alert("Export TBD")} title="Export CSV" className={`${secondaryButtonClasses} p-2.5`}><Icon name="Download" size={18} /></button> </div> </div> <div className={`${glassPanelClasses} p-3 md:p-4 overflow-x-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-gray-700`}> <div className="flex items-center gap-2 md:gap-3 whitespace-nowrap"> <span className="text-sm font-medium text-gray-300 mr-2">Filter:</span> {['category', 'status', 'carrier'].map(type => <select key={type} onChange={(e) => handleFilterChange(type, e.target.value)} value={activeFilters[type] || ""} className={`p-2 text-sm bg-gray-700 border border-gray-600 rounded-md text-gray-200 ${focusRingClasses}`}> {filterOptions[type === 'category' ? 'categories' : type === 'status' ? 'statuses' : 'carriers'].map(opt => <option key={opt} value={opt === "All" ? "" : type === 'category' ? opt.toLowerCase().replace(' ', '_') : opt}>{opt}</option>)} </select>)} <button onClick={toggleRenewalFilter} className={`p-2 text-sm rounded-md ${focusRingClasses} ${activeFilters.renewalIn30Days ? 'bg-[#0057e7] text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}>Renewal ≤ 30d</button> </div> </div> <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 md:gap-6"> <MetricWidget title="Active Policies" value={activePoliciesCount} iconName="ShieldCheck" glassPanelClasses={glassPanelClasses} /> <MetricWidget title="Avg. Premium/Yr" value={`$${avgPremium.toLocaleString()}`} iconName="DollarSign" glassPanelClasses={glassPanelClasses} /> <MetricWidget title="Expiring ≤ 90 Days" value={expiringSoonCount} iconName="AlertTriangle" iconColor="yellow-400" glassPanelClasses={glassPanelClasses} /> <MetricWidget title="AI Gap Warnings" value={aiGapWarningsCount} iconName="TrendingDown" iconColor="red-400" glassPanelClasses={glassPanelClasses} /> </div> {isLoading ? (<div className={`${glassPanelClasses} p-8 text-center`}><div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#0057e7] mx-auto"></div><p className="mt-4">Loading...</p></div>) : filteredPolicies.length > 0 ? ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"> {filteredPolicies.map(policy => ( <PolicyCard key={policy.id} policy={policy} glassCardClasses={glassPanelClasses} focusRingClasses={focusRingClasses} onViewDetails={openPolicyDetails} /> ))} </div> ) : ( <div className={`${glassPanelClasses} p-8 text-center`}> <Icon name="FileSearch" size={48} className="mx-auto text-gray-500 mb-4" /> <h3 className="text-xl font-semibold text-gray-100">No Policies Found</h3> <p className="text-gray-400 mt-2">{searchTerm || Object.values(activeFilters).some(f => f) ? "No policies match criteria." : "Add policies to begin."}</p> </div> )} {showDetailsDrawer && selectedPolicyForDetail && <PolicyDetailsDrawer policy={selectedPolicyForDetail} onClose={closePolicyDetails} glassPanelClasses={glassPanelClasses} focusRingClasses={focusRingClasses} />} </div> );
});

// MetricWidget component
const MetricWidget = memo(({ title, value, iconName, iconColor = "[#00e5ff]", glassPanelClasses }) => (
    <div className={`${glassPanelClasses || 'bg-gray-800/50'} p-5 rounded-lg shadow-md flex items-center space-x-4`}>
        <div className="p-3 bg-gray-700 rounded-full"> <Icon name={iconName} size={24} className={`text-${iconColor}`} /> </div>
        <div> <p className="text-sm text-gray-400">{title}</p> <p className="text-2xl font-semibold text-gray-100">{value}</p> </div>
    </div>
));

// PolicyCard component
const PolicyCard = memo(({ policy, glassCardClasses, focusRingClasses, onViewDetails }) => {
    const getStatusColor = (status) => ({ Active: 'bg-green-500/30 text-green-300 border-green-500', Lapsed: 'bg-red-500/30 text-red-300 border-red-500', 'Expiring Soon': 'bg-yellow-500/30 text-yellow-300 border-yellow-500', Draft: 'bg-blue-500/30 text-blue-300 border-blue-500' }[status] || 'bg-gray-500/30 text-gray-300 border-gray-500');
    const renewalDate = new Date(policy.renewal_date); const daysToRenewal = Math.ceil((renewalDate - new Date()) / (1000 * 60 * 60 * 24));
    let renewalText = renewalDate.toLocaleDateString(), renewalColor = "text-gray-400";
    if (policy.status === 'Active') { if (daysToRenewal <= 30 && daysToRenewal >= 0) { renewalText = `Renews in ${daysToRenewal}d`; renewalColor = "text-yellow-400 font-semibold"; } else if (daysToRenewal < 0) { renewalText = `Expired`; renewalColor = "text-red-400 font-semibold"; }}

    const handleViewDetailsClick = useCallback(() => {
        onViewDetails(policy);
    }, [onViewDetails, policy]);

    return ( <div className={`${glassCardClasses} p-5 rounded-lg shadow-lg flex flex-col justify-between hover:border-[#0057e7]/70 group`}> <div> <div className="flex justify-between items-start mb-3"> <div className="w-10 h-10 bg-gray-700 rounded-full flex items-center justify-center text-sm font-bold text-gray-400 ring-1 ring-gray-600">{policy.carrier?.substring(0, 2).toUpperCase() || 'N/A'}</div> <span className={`px-2.5 py-1 text-xs font-medium rounded-full border ${getStatusColor(policy.status)}`}>{policy.status}</span> </div> <h3 className="text-lg font-semibold text-gray-100 truncate group-hover:text-[#00e5ff]" title={policy.name || policy.policy_number}>{policy.name || policy.policy_number}</h3> <p className="text-sm text-gray-400 truncate" title={policy.carrier}>{policy.carrier}</p> <p className="text-xs text-gray-500 truncate mb-1" title={policy.property_name}>Property: {policy.property_name || 'N/A'}</p> <p className="text-xs text-gray-500">Policy #: <span className="font-medium text-gray-300">{policy.policy_number || 'N/A'}</span></p> </div> <div className="mt-4 pt-4 border-t border-gray-700/50 space-y-2"> <div className="flex justify-between text-sm"><span className="text-gray-400">Premium:</span><span className="font-semibold text-gray-200">${(policy.premium || 0).toLocaleString()}</span></div> <div className="flex justify-between text-sm"><span className="text-gray-400">Renewal:</span><span className={renewalColor}>{renewalText}</span></div> <div className="mt-3 flex items-center justify-end gap-2"> <button onClick={handleViewDetailsClick} className={`${secondaryButtonClasses} text-xs py-1.5 px-3`}><Icon name="ExternalLink" size={14}/> Details</button> <button onClick={() => alert(`Archive ${policy.policy_number}? TBD`)} className={`${secondaryButtonClasses} text-xs py-1.5 px-3 hover:bg-red-600/30 hover:text-red-300`}><Icon name="Archive" size={14}/> Archive</button> </div> </div> </div> );
});

// PolicyDetailsDrawer component
const PolicyDetailsDrawer = memo(({ policy, onClose, glassPanelClasses, focusRingClasses }) => {
    const [activeDetailTab, setActiveDetailTab] = useState('overview');
    if (!policy) return null;
    
    const DetailTabButton = memo(({ label, tabName, iconName, currentTab, onTabChange }) => ( <button onClick={() => onTabChange(tabName)} className={`flex items-center gap-2 px-3 py-2 text-xs sm:text-sm font-medium rounded-t-md ${focusRingClasses} ${currentTab === tabName ? 'bg-gray-700 text-[#00e5ff]' : 'text-gray-400 hover:bg-gray-600/50'}`} > {iconName && <Icon name={iconName} size={16} />} {label} </button> ));
    const handleTabChange = useCallback(tabName => setActiveDetailTab(tabName), []);

    return ( <div className="fixed inset-0 z-30 flex justify-end"> <div className="fixed inset-0 bg-black/60 backdrop-blur-sm" onClick={onClose}></div> <div className={`relative w-full max-w-xl md:max-w-2xl lg:max-w-3xl h-full ${glassPanelClasses} bg-[#18202b] border-l border-gray-700 flex flex-col shadow-2xl`}> <div className="flex items-center justify-between p-4 md:p-5 border-b border-gray-700"> <h3 className="text-xl font-semibold text-gray-100 truncate" title={policy.name || policy.policy_number}>{policy.name || policy.policy_number}</h3> <button onClick={onClose} className={`p-2 rounded-md text-gray-400 hover:bg-gray-700 hover:text-white ${focusRingClasses}`}><Icon name="X" size={24} /></button> </div> <div className="flex border-b border-gray-700 px-2 pt-2 md:px-4 md:pt-3 overflow-x-auto scrollbar-thin"> <DetailTabButton label="Overview" tabName="overview" iconName="List" currentTab={activeDetailTab} onTabChange={handleTabChange} /> <DetailTabButton label="Coverages" tabName="coverages" iconName="ShieldCheck" currentTab={activeDetailTab} onTabChange={handleTabChange} /> <DetailTabButton label="Docs" tabName="documents" iconName="FileText" currentTab={activeDetailTab} onTabChange={handleTabChange} /> <DetailTabButton label="Claims" tabName="claims" iconName="AlertTriangle" currentTab={activeDetailTab} onTabChange={handleTabChange} /> <DetailTabButton label="AI Q&A" tabName="ai_qa" iconName="MessageSquare" currentTab={activeDetailTab} onTabChange={handleTabChange} /> </div> <div className="flex-grow p-4 md:p-6 overflow-y-auto space-y-4 text-gray-300 text-sm scrollbar-thin"> {activeDetailTab === 'overview' && (<> <h4 className="text-lg font-semibold text-gray-200 mb-2">Policy Overview</h4> {Object.entries({ "Policy Number": policy.policy_number, Carrier: policy.carrier, "Linked Property": policy.property_name, Premium: policy.premium && `$${policy.premium.toLocaleString()}`, "Renewal Date": new Date(policy.renewal_date).toLocaleDateString(), Status: policy.status, "Coverage Types": policy.coverage_types?.join(', ') }).filter(([_,val])=>val).map(([key,val])=><p key={key}><strong>{key}:</strong> {val}</p>)} </>)} {activeDetailTab === 'coverages' && <div><h4 className="text-lg font-semibold text-gray-200 mb-2">Coverages Matrix</h4><p>(Detailed coverage matrix TBD)</p></div>} {activeDetailTab === 'documents' && <div> <h4 className="text-lg font-semibold text-gray-200 mb-2">Policy Documents</h4> {policy.document_url ? <a href={policy.document_url} target="_blank" rel="noopener noreferrer" className={`inline-flex items-center gap-2 text-[#00e5ff] hover:underline ${focusRingClasses}`}><Icon name="Paperclip" size={16} /> View Policy Doc (Mock)</a> : <p>No primary document URL.</p>} </div>} {activeDetailTab === 'claims' && <div><h4 className="text-lg font-semibold text-gray-200 mb-2">Claims History</h4><p>(List of claims TBD)</p></div>} {activeDetailTab === 'ai_qa' && <div><h4 className="text-lg font-semibold text-gray-200 mb-2">AI Assistant Q&A</h4><p>(Chat panel for this policy TBD)</p></div>} </div> </div> </div> );
});

export default App;
 
